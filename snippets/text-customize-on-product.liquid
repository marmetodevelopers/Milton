<div id="customizer-Modal" class="customizer_modal">
         <!-- Modal content -->
   <div class="customizer_modal-content">
     
      <div class="modal---head">
         {% comment %} once the functinality works fine then i will give the customize option {% endcomment %}
         <p class="modal-head_text">Give your stainless steel bottle a personal touch</p>
         <span class="customizer_close">&times;</span>
      </div>
     
      {% assign images = product.media  %}
      <div class="modal---body">
        
         <div class="customize-image-container">
            <div class="image-text">Preview</div>
            <canvas id="customizer" width="468" height="468"></canvas>
         </div>
        
         <div class="modal-customize-body">
           
            <div class="input-text">ENTER YOUR TEXT</div>
            <div class="field" data-ver-size="" data-hor-size="" data-ver-limit="" data-hor-limit="">
          <input type="text"  name="customized_Text" id="customized_Text" maxlength="9">
        </div>
            {% comment %} once the functinality works fine then i will give the customize option {% endcomment %}
            <div class="info-text">
               Type in a word that you would like to be engraved onto your mobile
            </div>
            <div class="info--text">
               (Only 15 characters)
            </div>
            <div class="input-text text-placement">Select The Badge Images</div>
            <div class="product_color_badge_text_images">
              {% assign icons = product.metafields.custom.custom_product_badge_images.value %}
              <div class="metafield_values">
                {% for metaimage in icons %}
                  <div class="grid__items product__ingredients-main">
                    <div class="product__ingredients-contents flex">

                      <div class="product_meta_image forloop-{{ forloop.index }}">
                        {% if metaimage  != blank %}
                          <img src="{{ metaimage | image_url }}" alt="img">
                        {% endif %}
                      </div>
                    </div>
                  </div>
                {% endfor %}
              </div>

            </div>
           
            <div class="input-text text-placement">Placement</div>
            <div class="placement-buttos">
               <input type="radio" class="placement-child" id="horizontal" name="placement" value="horizontal" checked="checked">
               <label class="checkLabel checked" for="horizontal">ABC</label>
               <input type="radio" class="placement-child"  id="vertical" name="placement" value="vertical">
               <label class="checkLabel" for="vertical">
                  <div class="rotate">ABC</div>
               </label>
            </div>
           
            <div class="input-text text-placement">SELECT FONT STYLE</div>
           
            <div id="font-family">
               <select size="25" id="selecth1FontFamily" name="selectFontFamily" onchange="runCustomization();" >
               {% assign select = true %}
                 {% for block in section.blocks %}
                    {% if block.type == 'fontfamily' %}
                      <option {% if select %}selected{% assign select = false %}{% endif %}>{{ block.settings.font-family-block }}</option>
                    {% endif %}
                {% endfor %}
               </select>
            </div> 
            <input type="hidden" id="canvasDataUrl" name="properties[CanvasDataUrl]" value="">
            <div class="modal-atc-body">
            {%- form 'product', product, id: product_form_id, class: 'product-single__form', data-type: 'add-to-cart-form-custom' -%}
              {%- if enable_dynamic_buttons -%}
                <div class="payment-buttons">
              {%- endif -%}
            
                {%- liquid
                  assign default_text = 'products.product.add_to_cart' | t
                  assign button_text = 'products.product.add_to_cart' | t
                  if template contains 'preorder'
                    assign default_text = 'products.product.preorder' | t
                    assign button_text = 'products.product.preorder' | t
                  endif
                  unless current_variant.available
                    assign button_text = 'products.product.sold_out' | t
                  endunless
                -%}
            
                <button
                  {% if product.empty? %}type="button"{% else %}type="submit"{% endif %}
                  name="add"
                  data-add-to-cart
                   {% unless current_variant.available %} disabled="disabled"{% endunless %}
                  class="btn btn--full add-to-cart{% if enable_dynamic_buttons and product.selling_plan_groups == empty %} btn--secondary{% endif %} customize-atc"
                >
                  <span data-add-to-cart-text data-default-text="{{ default_text }}">
                    {{ button_text }}
                  </span>
                </button>          
              {%- if enable_dynamic_buttons -%}
                </div>
              {%- endif -%}     
              <select name="id" data-product-select class="product-single__variants no-js">
                {%- for variant in product.variants -%}
                  {%- if variant.available -%}
                    <option {% if variant == product.selected_or_first_available_variant %}
                      selected="selected"{% endif %}
                      value="{{ variant.id }}">
                      {{ variant.title }} - {{ variant.price | money_with_currency }}
                    </option>
                  {%- else -%}
                    <option disabled="disabled">
                      {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                    </option>
                  {%- endif -%}
                {%- endfor -%}
              </select>
              {%- endform -%}
           </div>
         </div>
      </div>
   </div>
</div>

<script>

//function for radio buttons
$(document).on("click", 'input.placement-child', function () {
  if ($(this).is(":checked")) {
    $('label.checked').removeClass('checked');
    $(this).next("label.checkLabel").addClass("checked");
  }
});
$(document).on("click", 'input.emoji-child', function () {
  if ($(this).is(":checked")) {
    $('label.checked').removeClass('checked');
    $(this).next("label.emoji").addClass("checked");
  }
});
</script>

<script>
{% for value in product.metafields.custom.axis_values.value.horizontal %}   
  {% assign HheightAxis =  value.height %}{% assign HwidthAxis = value.width %}  
{% endfor %}

{% for value in product.metafields.custom.axis_values.value.vertical %}   
  {% assign VheightAxis =  value.width %}{% assign VwidthAxis = value.height %}  
{% endfor %}

{% assign color = "white" %}
  {% if product.metafields.custom.color != blank %}
    {% assign color = product.metafields.custom.color %}
  {% endif %}
  
  document.addEventListener("DOMContentLoaded", runCustomization);

let selectedImageSrc = "";

function runCustomization(event) {
    make_base();
    
    let message = document.getElementById("customized_Text").value || 'customize';
    
    // Event listener for metafield images
    let metaImages = document.querySelectorAll('.product_meta_image');
    metaImages.forEach(image => {
        image.addEventListener('click', function() {
            let imgSrc = this.querySelector('img').getAttribute('src');
            selectedImageSrc = imgSrc;
            make_base();
        });
    });

    //for FontFamily
    function getFont(fontSize = 14) {
        let mainCanvas = document.getElementById("customizer");
        let fontBase = 400; // selected default width for canvas
        
        var selector = document.getElementById('selecth1FontFamily');
        var family = selector.options[selector.selectedIndex].value;
        let ratio = fontSize / fontBase; // calc ratio
        let size = mainCanvas.width * ratio; // get font size based on current width
  
        return (size|0) + 'px '+family; // set font
    }
    
    function make_base() {
        window.base_image = new Image();
        base_image.crossOrigin = 'Anonymous';
        
        // Set the image source to the selected metafield image if available, else use the default
        if (selectedImageSrc) {
            base_image.src = selectedImageSrc;
        } else {
            base_image.src = "{{ images[0] | img_url: 'master' }}";
        }

        base_image.onload = function() {
            renderCanvas(base_image, message);
            
            var formElement = document.getElementById("customized_Text");
            formElement.addEventListener('keyup', textBoxChanged, false);

            var vertical = document.getElementById("vertical");
            vertical.addEventListener('click', Alignment);

            var horizontal = document.getElementById("horizontal");
            horizontal.addEventListener('click', Alignment);
        };
    }

    function textBoxChanged(e) {
        let target = e.target;
        message = target.value;
        
        renderCanvas(window.base_image, message);
    }

    function Alignment(e) {
        renderCanvas(window.base_image, message);
    }

    function renderCanvas(base_image, message = "Customize") {
        let mainCanvas = document.getElementById("customizer");
        let textRotation = document.querySelector('[name="placement"]:checked').value;
        let canheight = base_image.naturalHeight;
        let canwidth = base_image.naturalWidth;
        let imageHeightToRender = 468;
        let imageWidthToRender = 468;
        let rotation = 0;
        let height = 0;
        let width = 0;

        let context = mainCanvas.getContext("2d");
        context.fillStyle = "blue";
        context.font = "bold 16px Arial";
        context.fillText("Customizer", 240, 380);
        
        context.drawImage(base_image, 0, 0, canwidth, canheight, 0, 0, imageWidthToRender, imageHeightToRender);
        context.save();

        if (textRotation == 'horizontal') {
            rotation = 0;
            height = imageHeightToRender * ({{ HheightAxis }} / 100);
            width = imageWidthToRender * ({{ HwidthAxis }} / 100);
        } else {
            rotation = -90;
            height = imageHeightToRender * ({{ VheightAxis }} / 100);
            width = -imageWidthToRender * ({{ VwidthAxis }} / 100);
        }
        
        context.fillStyle = "{{ color }}";
        context.rotate(rotation * Math.PI / 180);
        context.font = getFont(12);
        context.textAlign = 'center';
        context.fillText(message, width, height);
        
        context.beginPath();
        var path = new Path2D();
        context.strokeStyle = "#fff";
        
        if (textRotation == 'horizontal') {
            context.setTransform(1, 0, 0, 1, width - 10, height - 48);
        } else {
            context.setTransform(0, 1, 1, 0, height - 16, -width + 64);
        }
        
        context.fill(path);
        context.restore();
    }
}


</script>
<script>
document.querySelector("[data-type='add-to-cart-form-custom']").addEventListener("submit", function(e){
    var name = document.getElementById("customized_Text").value || 'Borosil';
    var familyBox = document.getElementById('selecth1FontFamily');
    var fontFamily = familyBox.options[familyBox.selectedIndex].value;
    var selectedVariant = $('.variant-options-listItem.is-selected');
    let textRotation = document.querySelector('[name="placement"]:checked').value;
    var varianttitle = selectedVariant.attr('data-variant-title');
    var variantId = 0;
    var eleTitle = [];

    e.preventDefault();
    let mainCanvas = document.getElementById("customizer");
    let dataURL = mainCanvas.toDataURL('image/jpeg', 0.5);
    document.getElementById("canvasDataUrl").value = dataURL; 
    console.log(dataURL,"=============================>");         

    {% assign customProductHandle = product.handle %}
    let myproduct = {{ product.variants | json }}
    
    if(myproduct.length == 0 ){
        $(".not-available").show();
        $(".customize-atc").css("background","rgb(212, 212, 212)");
        setTimeout(function(){
            $(".not-available").hide();
            $(".customize-atc").css("background","#B4D241");
        },2000);
    } else {
        myproduct.forEach(element => {
            eleTitle.push(element.title);
            if(element.title == varianttitle){
                if(element.available){
                    let mainCanvas = document.getElementById("customizer");
                    let dataURL = mainCanvas.toDataURL('image/jpeg', 0.5);
                    variantId = element.id;
                    let blob = dataURItoBlob(dataURL);

                    var formData = new FormData(document.querySelector('[data-type="add-to-cart-form-custom"]'));
                    formData.append("id",variantId);
                    formData.append("properties[Name]",name);
                    formData.append("properties[Font]",fontFamily);
                    formData.append("properties[Placement]",textRotation);
                    formData.append("properties[Customise-charge]","{{ product.metafields.custom.personalize_price }}");
                    formData.append("properties[Image]", blob, 'custom_image2.jpeg');
                    
                    // Adding image URL as a line item property
                    formData.append("properties[Image_URL]", dataURL);

                    const config = fetchConfig('javascript');
                    config.headers['X-Requested-With'] = 'XMLHttpRequest';
                    delete config.headers['Content-Type'];
                    config['body'] = formData;
                    $('.customize-atc').hide();
                    $('.custom-atc-loader').show();

                    fetch2(window.Shopify.routes.root + 'cart/add.js', config)
                    .then(response => {
                        return response.json();
                    })
                    .then(response => {
                        mmajaxcart.CartCountHandler();
                        mmajaxcart.AjaxcartRender();
                        setTimeout(function(){
                            mmajaxcart.AjaxcartOpen();
                        },1500);
                        $('.customize-atc').show();
                        $('.custom-atc-loader').hide();
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                        $('.customize-atc').show();
                        $('.custom-atc-loader').hide();
                    })
                } else {
                    $(".not-available").show();
                    $(".customize-atc").css("background","rgb(212, 212, 212)");
                    setTimeout(function(){
                        $(".not-available").hide();
                        $(".customize-atc").css("background","#B4D241");
                    },2000);
                }
            }
        });
    }

    if(!eleTitle.includes(varianttitle)){
        $(".not-available").show();
        $(".customize-atc").css("background","rgb(212, 212, 212)");
        setTimeout(function(){
            $(".not-available").hide();
            $(".customize-atc").css("background","#B4D241");
        },2000);
    }
});

// Function to convert dataURL to blob
function dataURItoBlob(dataURI) {
    var byteString = atob(dataURI.split(',')[1]);
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    var blob = new Blob([ab], { type: mimeString });
    return blob;
}


</script>